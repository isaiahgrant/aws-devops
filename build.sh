dockerfile=$1

# This must match the config from the Dockerfile.
# It exists here to automate tagging
export ALPINE_VERSION=3.12
export NODE_VERSION=12.22.1
export NPM_VERSION=12.22.1
export PYTHON_VERSION=3.8.10
export PIP_VERSION=20.1.1
export AWS_CLI_VERSION=1.20.1
export AWS_SAM_CLI_VERSION=1.26.0
export AWS_CDK_CLI_VERSION=1.114.0
# export ALPINE_VERSION=3.13
# export NODE_VERSION=14.15.5
# export NPM_VERSION=14.15.5
# export PYTHON_VERSION=3.8.7
# export PIP_VERSION=20.3.4
# export AWS_CLI_VERSION=1.19.2
# export AWS_SAM_CLI_VERSION=1.17.0
# export AWS_CDK_CLI_VERSION=1.89.0

generate_version_vars() {
    local NAME=$1
    local FULL_VERSION=$2

    arrIN=(${FULL_VERSION//./ })
    local MAJOR="${NAME}_MAJOR_VERSION"
    local MINOR="${NAME}_MINOR_VERSION"
    local PATCH="${NAME}_PATCH_VERSION"

    export $MAJOR=${arrIN[0]:-0}
    export $MINOR=${arrIN[1]:-0}
    export $PATCH=${arrIN[2]:-0}

    printf "$NAME:\n MAJOR: ${!MAJOR}\n MINOR: ${!MINOR}\n PATCH: ${!PATCH}\n"
}

printf "\nBuilding Image for Versions:\n"
generate_version_vars ALPINE $ALPINE_VERSION
generate_version_vars NODE $NODE_VERSION
generate_version_vars NPM $NPM_VERSION
generate_version_vars PYTHON $PYTHON_VERSION
generate_version_vars PIP $PIP_VERSION
generate_version_vars AWS_CLI $AWS_CLI_VERSION
generate_version_vars AWS_SAM_CLI $AWS_SAM_CLI_VERSION
generate_version_vars AWS_CDK_CLI $AWS_CDK_CLI_VERSION

AUTHOR=grantdscs
IMAGE_ID=aws-devops
SOURCE=$AUTHOR/$IMAGE_ID

FULL_TAG=$SOURCE:alpine$ALPINE_VERSION-node$NODE_VERSION-python$PYTHON_VERSION-aws$AWS_CLI_VERSION-sam$AWS_SAM_CLI_VERSION-cdk$AWS_CDK_CLI_VERSION

ALPINE_MAJOR_TAG=$SOURCE:alpine$ALPINE_MAJOR_VERSION
ALPINE_MINOR_TAG=$SOURCE:alpine$ALPINE_MAJOR_VERSION.$ALPINE_MINOR_VERSION

NODE_MAJOR_TAG=$SOURCE:node$NODE_MAJOR_VERSION
NODE_MINOR_TAG=$SOURCE:node$NODE_MAJOR_VERSION.$NODE_MINOR_VERSION
NODE_PATCH_TAG=$SOURCE:node$NODE_MAJOR_VERSION.$NODE_MINOR_VERSION.$NODE_PATCH_VERSION

NPM_MAJOR_TAG=$SOURCE:npm$NPM_MAJOR_VERSION
NPM_MINOR_TAG=$SOURCE:npm$NPM_MAJOR_VERSION.$NPM_MINOR_VERSION
NPM_PATCH_TAG=$SOURCE:npm$NPM_MAJOR_VERSION.$NPM_MINOR_VERSION.$NPM_PATCH_VERSION

PYTHON_MAJOR_TAG=$SOURCE:python$PYTHON_MAJOR_VERSION
PYTHON_MINOR_TAG=$SOURCE:python$PYTHON_MAJOR_VERSION.$PYTHON_MINOR_VERSION
PYTHON_PATCH_TAG=$SOURCE:python$PYTHON_MAJOR_VERSION.$PYTHON_MINOR_VERSION.$PYTHON_PATCH_VERSION

PIP_MAJOR_TAG=$SOURCE:pip$PIP_MAJOR_VERSION
PIP_MINOR_TAG=$SOURCE:pip$PIP_MAJOR_VERSION.$PIP_MINOR_VERSION
PIP_PATCH_TAG=$SOURCE:pip$PIP_MAJOR_VERSION.$PIP_MINOR_VERSION.$PIP_PATCH_VERSION

AWS_CLI_MAJOR_TAG=$SOURCE:aws$AWS_CLI_MAJOR_VERSION
AWS_CLI_MINOR_TAG=$SOURCE:aws$AWS_CLI_MAJOR_VERSION.$AWS_CLI_MINOR_VERSION
AWS_CLI_PATCH_TAG=$SOURCE:aws$AWS_CLI_MAJOR_VERSION.$AWS_CLI_MINOR_VERSION.$AWS_CLI_PATCH_VERSION

AWS_SAM_CLI_MAJOR_TAG=$SOURCE:sam$AWS_SAM_CLI_MAJOR_VERSION
AWS_SAM_CLI_MINOR_TAG=$SOURCE:sam$AWS_SAM_CLI_MAJOR_VERSION.$AWS_SAM_CLI_MINOR_VERSION
AWS_SAM_CLI_PATCH_TAG=$SOURCE:sam$AWS_SAM_CLI_MAJOR_VERSION.$AWS_SAM_CLI_MINOR_VERSION.$AWS_SAM_CLI_PATCH_VERSION

AWS_CDK_CLI_MAJOR_TAG=$SOURCE:cdk$AWS_CDK_CLI_MAJOR_VERSION
AWS_CDK_CLI_MINOR_TAG=$SOURCE:cdk$AWS_CDK_CLI_MAJOR_VERSION.$AWS_CDK_CLI_MINOR_VERSION
AWS_CDK_CLI_PATCH_TAG=$SOURCE:cdk$AWS_CDK_CLI_MAJOR_VERSION.$AWS_CDK_CLI_MINOR_VERSION.$AWS_CDK_CLI_PATCH_VERSION

printf "\n\nBuilding image - $FULL_TAG\n\n"
RESULT=$(docker build \
    -f $dockerfile \
    --no-cache \
    --build-arg NODE_VERSION=$NODE_VERSION \
    --build-arg NPM_VERSION=$NPM_VERSION \
    --build-arg PYTHON_VERSION=$PYTHON_VERSION \
    --build-arg PIP_VERSION=$PIP_VERSION \
    --build-arg ALPINE_VERSION=$ALPINE_VERSION \
    --build-arg AWS_CLI_VERSION=$AWS_CLI_VERSION \
    --build-arg AWS_SAM_CLI_VERSION=$AWS_SAM_CLI_VERSION \
    --build-arg AWS_CDK_CLI_VERSION=$AWS_CDK_CLI_VERSION \
    -t $FULL_TAG \
    . \
)

# # TODO: Fix me
# if [ "" != "$RESULT" ]; then
#     printf "\n\n***** Docker build failed! Result $RESULT *****\n\n"
#     exit $RESULT
# fi

tag_image() {
    local PRINT_NAME=$1
    local MAJOR_TAG=$2
    local MINOR_TAG=$3

    printf "\nTag as $PRINT_NAME Major $MAJOR_TAG"
    docker tag \
        $FULL_TAG \
        $MAJOR_TAG
    printf "\nTag as $PRINT_NAME Minor $MINOR_TAG"
    docker tag \
        $FULL_TAG \
        $MINOR_TAG
}

printf "\n\nCreating version specific tags\n\n"
tag_image 'Alpine' $ALPINE_MAJOR_TAG $ALPINE_MINOR_TAG
tag_image 'Node' $NODE_MAJOR_TAG $NODE_MINOR_TAG
tag_image 'npm' $NPM_MAJOR_TAG $NPM_MINOR_TAG
tag_image 'Python' $PYTHON_MAJOR_TAG $PYTHON_MINOR_TAG
tag_image 'pip' $PIP_MAJOR_TAG $PIP_MINOR_TAG
tag_image 'AWS CLI' $AWS_CLI_MAJOR_TAG $AWS_CLI_MINOR_TAG
tag_image 'AWS SAM CLI' $AWS_SAM_CLI_MAJOR_TAG $AWS_SAM_CLI_MINOR_TAG
tag_image 'AWS CDK CLI' $AWS_CDK_CLI_MAJOR_TAG $AWS_CDK_CLI_MINOR_TAG

printf "\nTag as latest\n"
docker tag \
    $FULL_TAG \
    $SOURCE:latest

printf "\nPushing\n"
docker image push --all-tags $SOURCE

printf "\nComplete!\n"
